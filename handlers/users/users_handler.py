from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove
from data.config import ADMINS
from loader import dp
from markups.defaultkeyboard.number_request import contact_markup
from query_data.config import insert_user
from states.registration import Registration
from markups.defaultkeyboard.start_button import start_markup
from markups.defaultkeyboard.menu_markup import menu_markup_def, menu_markup_def_admin


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', state=Registration.start)
async def registration(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∏–º—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=ReplyKeyboardRemove())
    await Registration.name.set()


@dp.message_handler(state=Registration.start)
async def not_registration(message: types.Message):
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è‚ùóÔ∏è", reply_markup=start_markup)
    await Registration.start.set()


@dp.message_handler(state=Registration.name)
async def name_state(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(
        {'name': name})
    await message.answer(f'{name} —Ç–µ–ø–µ—Ä –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä', reply_markup=contact_markup)
    await Registration.number.set()


@dp.message_handler(content_types='contact', state=Registration.number, is_sender_contact=True)
async def phone_number(message: types.Message, state: FSMContext):
    number = message.contact.phone_number
    await state.update_data(
        {'number': number}
    )
    await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ')
    async with state.proxy() as data:
        name = data['name']
        number = data['number']
        insert_user(name, number, message.from_user.id)
    if str(message.from_user.id) in ADMINS:
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é —Å–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=menu_markup_def_admin)
    else:
        await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é —Å–µ–±–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=menu_markup_def)

    await state.finish()


@dp.message_handler(state=Registration.number)
async def phone_number(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É contact‚ùóÔ∏è', reply_markup=contact_markup)


@dp.message_handler(text='üîö –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é')
async def glavniy_menu(message: types.Message):
    await message.delete()
    if str(message.from_user.id) in ADMINS:
        await message.answer('–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é', reply_markup=menu_markup_def_admin)
    else:
        await message.answer('–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é', reply_markup=menu_markup_def)
